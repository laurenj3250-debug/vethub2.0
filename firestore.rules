/**
 * @file VetCare Hub Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all patient data and associated information within the VetCare Hub application.
 *
 * Data Structure:
 * All data is nested under the /users/{userId} path, ensuring that each user has their own private data tree.
 * - /users/{userId}/patients/{patientId}: Stores patient information.
 * - /users/{userId}/patients/{patientId}/tasks/{taskId}: Stores tasks related to a specific patient.
 * - /users/{userId}/patientInfo/{patientInfoId}: Stores detailed patient information.
 * - /users/{userId}/roundingData/{roundingDataId}: Stores patient rounding data.
 * - /users/{userId}/mriData/{mriDataId}: Stores MRI data for patients.
 * - /users/{userId}/generalTasks/{generalTaskId}: Stores general tasks not associated with a specific patient.
 *
 * Key Security Decisions:
 * - Strict User Ownership: Only the authenticated user (owner) can create, read, update, or delete data within their /users/{userId} tree.
 * - No Listing of Other Users' Data: Listing operations are restricted to the user's own data.
 * - Denormalization for Authorization:  Data required for authorization (e.g., userId) is denormalized onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for patient documents.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) User A can create a patient document under their own user ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.id: "user_a"
     * @allow (get) User A can read a patient document under their own user ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a patient document under User B's ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.id: "user_b"
     * @deny (update) User A cannot update a patient document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/patients/{patientId} {
      // Allow the user to read their own patients
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create a patient if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for task documents within a patient.
     * @path /users/{userId}/patients/{patientId}/tasks/{taskId}
     * @allow (create) User A can create a task document under their own user ID and patient ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_x"
     * @allow (get) User A can read a task document under their own user ID and patient ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a task document under User B's ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_y"
     * @deny (update) User A cannot update a task document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/patients/{patientId}/tasks/{taskId} {
      // Allow the user to read their own tasks
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create a task if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for patient info documents.
     * @path /users/{userId}/patientInfo/{patientInfoId}
     * @allow (create) User A can create a patient info document under their own user ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_x"
     * @allow (get) User A can read a patient info document under their own user ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a patient info document under User B's ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_y"
     * @deny (update) User A cannot update a patient info document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/patientInfo/{patientInfoId} {
      // Allow the user to read their own patient info
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create a patient info if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for rounding data documents.
     * @path /users/{userId}/roundingData/{roundingDataId}
     * @allow (create) User A can create a rounding data document under their own user ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_x"
     * @allow (get) User A can read a rounding data document under their own user ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a rounding data document under User B's ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_y"
     * @deny (update) User A cannot update a rounding data document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/roundingData/{roundingDataId} {
      // Allow the user to read their own rounding data
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create rounding data if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for MRI data documents.
     * @path /users/{userId}/mriData/{mriDataId}
     * @allow (create) User A can create a MRI data document under their own user ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_x"
     * @allow (get) User A can read a MRI data document under their own user ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a MRI data document under User B's ID.
     *   - auth.uid: "user_a"
     *   - request.resource.data.patientId: "patient_y"
     * @deny (update) User A cannot update a MRI data document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mriData/{mriDataId} {
      // Allow the user to read their own MRI data
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create MRI data if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for general task documents.
     * @path /users/{userId}/generalTasks/{generalTaskId}
     * @allow (create) User A can create a general task document under their own user ID.
     *   - auth.uid: "user_a"
     * @allow (get) User A can read a general task document under their own user ID.
     *   - auth.uid: "user_a"
     * @deny (create) User A cannot create a general task document under User B's ID.
     *   - auth.uid: "user_a"
     * @deny (update) User A cannot update a general task document that does not exist.
     *   - auth.uid: "user_a"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/generalTasks/{generalTaskId} {
      // Allow the user to read their own general tasks
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Only allow the user to create a general task if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update/delete only if they are the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }
  }
}